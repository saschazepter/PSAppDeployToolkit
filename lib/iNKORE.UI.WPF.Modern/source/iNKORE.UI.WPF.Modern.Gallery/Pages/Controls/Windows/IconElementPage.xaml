<ui:Page
    x:Class="iNKORE.UI.WPF.Modern.Gallery.Pages.Controls.Windows.IconElementPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:iNKORE.UI.WPF.Modern.Gallery"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:ui="http://schemas.inkore.net/lib/ui/wpf/modern" xmlns:ikw="http://schemas.inkore.net/lib/ui/wpf"
    Title="Icon Element"
    d:DesignWidth="800"
    Loaded="Page_Loaded"
    mc:Ignorable="d">
    <StackPanel>
        <local:ControlExample x:Name="Example1" HeaderText="A BitmapIcon with a multicolor bitmap image">
            <local:ControlExample.Example>
                <StackPanel>
                    <TextBlock
                        Margin="0,0,0,12"
                        Style="{DynamicResource BodyTextBlockStyle}"
                        Text="The ShowAsMonochrome property (true by default) will result in a solid block of the foreground color if the property is set to true and the icon is more than one color. This behavior can be ignored by setting the ShowAsMonochrome property to false." />
                    <ui:BitmapIcon x:Name="SlicesIcon"
                        Width="50" Height="50"
                        HorizontalAlignment="Left"
                        ShowAsMonochrome="False"
                        UriSource="/Assets/slices.png" />
                </StackPanel>
            </local:ControlExample.Example>
            <local:ControlExample.Options>
                <CheckBox
                    x:Name="MonochromeButton"
                    Content="Monochrome"
                    IsChecked="{Binding ShowAsMonochrome, ElementName=SlicesIcon, Mode=TwoWay}"
                    Click="MonochromeButton_Click"/>
            </local:ControlExample.Options>
        </local:ControlExample>
        <local:ControlExample x:Name="Example2"
            HeaderText="A FontIcon using pre-defined icon sets">
            <local:ControlExample.Example>
                <StackPanel>
                    <TextBlock Margin="0,0,0,12" Style="{DynamicResource BodyTextBlockStyle}"
                        Text="There are a bunch of pre-defined icon sets that you can use in your application. The Segoe Fluent Icons is one of them and it is used in this example. You can use the Icon property to set the icon for a control, which is the most recommended and preferred way to use icons in your application. This saves you from having to look up the glyph value and font family to use." />

                    <ikw:SimpleStackPanel  Spacing="4" Orientation="Vertical" HorizontalAlignment="Left">
                        <FrameworkElement.Resources>
                            <Style TargetType="ikw:SimpleStackPanel">
                                <Setter Property="Spacing" Value="8"/>
                                <Setter Property="Orientation" Value="Horizontal"/>
                            </Style>
                            <Style TargetType="Button" BasedOn="{StaticResource {x:Static ui:ThemeKeys.DefaultButtonStyleKey}}">
                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                            </Style>
                        </FrameworkElement.Resources>
                        
                        <!--Segoe Fluent Icons-->
                        <TextBlock Margin="0,0,0,10" FontSize="16" FontWeight="SemiBold">
                            Segoe Fluent Icons
                        </TextBlock>

                        <Button>
                            <ikw:SimpleStackPanel>
                                <ui:FontIcon Icon="{x:Static ui:SegoeFluentIcons.Settings}" />
                                <TextBlock>
                                    SegoeFluentIcons | Settings
                                </TextBlock>
                            </ikw:SimpleStackPanel>
                        </Button>
                        <Button>
                            <ikw:SimpleStackPanel>
                                <ui:FontIcon Icon="{x:Static ui:SegoeFluentIcons.Document}" />
                                <TextBlock>
                                    SegoeFluentIcons | Document
                                </TextBlock>
                            </ikw:SimpleStackPanel>
                        </Button>
                        <Button>
                            <ikw:SimpleStackPanel>
                                <ui:FontIcon Icon="{x:Static ui:SegoeFluentIcons.SendFill}" />
                                <TextBlock>
                                    SegoeFluentIcons | SendFill
                                </TextBlock>
                            </ikw:SimpleStackPanel>
                        </Button>

                        <!--Fluent System Icons-->
                        <TextBlock Margin="0,10" FontSize="16" FontWeight="SemiBold">
                            Fluent System Icons
                        </TextBlock>

                        <Button>
                            <ikw:SimpleStackPanel>
                                <ui:FontIcon Icon="{x:Static ui:FluentSystemIcons.Home_16_Regular}" />
                                <TextBlock>
                                    FluentSystemIcons | Home_16_Regular
                                </TextBlock>
                            </ikw:SimpleStackPanel>
                        </Button>
                        <Button>
                            <ikw:SimpleStackPanel>
                                <ui:FontIcon Icon="{x:Static ui:FluentSystemIcons.Accessibility_16_Regular}" />
                                <TextBlock>
                                    FluentSystemIcons | Accessibility_16_Regular
                                </TextBlock>
                            </ikw:SimpleStackPanel>
                        </Button>
                    </ikw:SimpleStackPanel>

                    <TextBlock Margin="0,16,0,0" Style="{DynamicResource BodyTextBlockStyle}"
                        Text="You can also define your own icon sets by creating a static class with static properties that return the icon you want to use. This is what the SegoeFluentIcons and FluentSystemIcons classes are doing." />

                </StackPanel>
            </local:ControlExample.Example>
        </local:ControlExample>
        <local:ControlExample x:Name="Example3"
            HeaderText="Group icon and text even faster">
            <local:ControlExample.Example>
                <StackPanel>
                    <TextBlock Margin="0,0,0,12" Style="{DynamicResource BodyTextBlockStyle}"
                        Text="When using icon and text together, you can use the IconAndText control to write your XAML much more concisely. The IconAndText control is a simple control that combines an icon and text together in a single control. It is used in the examples below to show how you can use it to create buttons with icons and text." />
                    <Button Margin="0,0,0,8">
                        <ui:IconAndText Icon="{x:Static ui:SegoeFluentIcons.Audio}" Content="Pick a music"/>
                    </Button>
                    <Button Padding="12,12,12,8">
                        <ui:IconAndText Icon="{x:Static ui:SegoeFluentIcons.Send}" 
                            Content="Send" IconSize="24" Orientation="Vertical" Spacing="8"/>
                    </Button>

                </StackPanel>
            </local:ControlExample.Example>
        </local:ControlExample>

        <local:ControlExample x:Name="Example4"
            HeaderText="A FontIcon using a glyph from a specific font family in a button">
            <local:ControlExample.Example>
                <StackPanel>
                    <TextBlock
                        Margin="0,0,0,12"
                        Style="{DynamicResource BodyTextBlockStyle}"
                        Text="Use FontIcon as the icon for a control if you want to specify a Glyph value from a FontFamily. Windows 10 uses the Segoe MDL2 Assets FontFamily and that is what this example is showing." />
                    <Button>
                        <ui:FontIcon FontFamily="Segoe MDL2 Assets" Glyph="&#xE790;" />
                    </Button>
                </StackPanel>
            </local:ControlExample.Example>
        </local:ControlExample>
        <local:ControlExample x:Name="Example5"
            HeaderText="A ImageIcon using a bitmap image in a button">
            <local:ControlExample.Example>
                <StackPanel>
                    <TextBlock
                        Margin="0,0,0,12"
                        Style="{DynamicResource BodyTextBlockStyle}"
                        Text="To use an ImageIcon as the icon for a control, you can set image that has a file format supported by the Image class. The two examples here show a PNG and SVG image as the icon." />
                    <Button Name="ImageExample1" Width="100">
                        <ui:ImageIcon Source="/Assets/slices.png" />
                    </Button>
                </StackPanel>
            </local:ControlExample.Example>
        </local:ControlExample>
        <!--<local:ControlExample
            x:Name="Example6"
            HeaderText="A ImageIcon using a SVG image in a button">
            <local:ControlExample.Example>
                <Button Name="ImageExample2">
                    <ui:ImageIcon Width="50" Source="https://raw.githubusercontent.com/DiemenDesign/LibreICONS/master/svg-color/libre-camera-panorama.svg" />
                </Button>
            </local:ControlExample.Example>
        </local:ControlExample>-->
        <local:ControlExample x:Name="Example7"
            HeaderText="A PathIcon in a button">
            <local:ControlExample.Example>
                <StackPanel>
                    <TextBlock
                        Margin="0,0,0,12"
                        Style="{DynamicResource BodyTextBlockStyle}"
                        Text="To use a PathIcon as the icon for a control, you specify the path data of the image you are trying to display. The path data draws a series of connected lines and curves." />
                    <Button Name="Example1Button">
                        <ui:PathIcon HorizontalAlignment="Center" Data="F1 M 16,12 20,2L 20,16 1,16" />
                    </Button>
                </StackPanel>
            </local:ControlExample.Example>
        </local:ControlExample>
    </StackPanel>
</ui:Page>
