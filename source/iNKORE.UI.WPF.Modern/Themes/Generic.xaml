<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ui="clr-namespace:iNKORE.UI.WPF.Modern.Controls" 
                    xmlns:common="clr-namespace:iNKORE.UI.WPF.Modern.Common"
                    xmlns:converters="clr-namespace:iNKORE.UI.WPF.Modern.Common.Converters"
                    xmlns:ikw="http://schemas.inkore.net/lib/ui/wpf"
                    xmlns:primitives="clr-namespace:iNKORE.UI.WPF.Modern.Controls.Primitives">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/iNKORE.UI.WPF.Modern;component/Controls/AnimatedVisualSource.xaml" />
        <ResourceDictionary Source="/iNKORE.UI.WPF.Modern;component/Controls/Frame.xaml" />
        <ResourceDictionary Source="/iNKORE.UI.WPF.Modern;component/Controls/Page.xaml" />
        <ResourceDictionary Source="/iNKORE.UI.WPF.Modern;component/Controls/ThumbEx.xaml" />
        <ResourceDictionary Source="/iNKORE.UI.WPF.Modern;component/Controls/IconAndText.xaml" />
        <ResourceDictionary Source="/iNKORE.UI.WPF.Modern;component/Controls/ProjectBadge.xaml" />
        <ResourceDictionary Source="/iNKORE.UI.WPF.Modern;component/Themes/FontIconFallback.xaml" />
        <ResourceDictionary Source="/iNKORE.UI.WPF.Modern;component/Themes/ListViewHeaderItem.xaml" />
        <ResourceDictionary Source="/iNKORE.UI.WPF.Modern;component/Themes/TextContextMenu.xaml" />
        <ResourceDictionary Source="/iNKORE.UI.WPF.Modern;component/Controls/Primitives/TitleBarButton.xaml" />
        <ResourceDictionary Source="/iNKORE.UI.WPF.Modern;component/Controls/Primitives/TitleBarControl.xaml" />
        <ResourceDictionary Source="/iNKORE.UI.WPF.Modern;component/Controls/AcrylicPanel.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <ikw:AddValueConverter x:Key="addValueConverter" />
    <ikw:CornerRadiusFilterConverter x:Key="cornerRadiusFilterConverter_Bottom" Filter="Bottom"/>
    <ikw:ThicknessFilterConverter x:Key="thicknessFilterConverter_ExcludeTop" Filter="ExcludeTop"/>

    <Style TargetType="ui:ElevationBorder">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ui:ElevationBorder">
                    <Grid x:Name="Canvas_Root">
                            
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}">
                        </Border>
                        <Border x:Name="Border_Elevation" BorderBrush="{TemplateBinding ElevationBrush}"
                                BorderThickness="{TemplateBinding BorderThickness, Converter={StaticResource thicknessFilterConverter_ExcludeTop}}" CornerRadius="{TemplateBinding CornerRadius, Converter={StaticResource cornerRadiusFilterConverter_Bottom}}">
                        </Border>

                        <Border BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                            <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(common:ShadowAssist.CacheMode)}">
                                <ContentPresenter/>
                            </AdornerDecorator>
                        </Border>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsElevationEnabled" Value="False">
                            <Setter TargetName="Border_Elevation" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--<Style TargetType="{x:Type ui:ParallaxView}">
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ui:ParallaxView}">
                    <ContentPresenter Margin="{TemplateBinding OffsetMargin}">
                        <ContentPresenter.Height>
                            <MultiBinding Converter="{StaticResource addValueConverter}">
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ui:ParallaxView}}" Path="ActualHeight"/>
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ui:ParallaxView}}" Path="VerticalShift"/>
                            </MultiBinding>
                        </ContentPresenter.Height>
                        <ContentPresenter.Width>
                            <MultiBinding Converter="{StaticResource addValueConverter}">
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ui:ParallaxView}}" Path="ActualWidth"/>
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ui:ParallaxView}}" Path="HorizontalShift"/>
                            </MultiBinding>
                        </ContentPresenter.Width>
                    </ContentPresenter>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

</ResourceDictionary>
